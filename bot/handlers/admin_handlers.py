from data.database import PaymentDatabase
import secrets
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from keyboards.builder import get_main_menu

PaymentDatabase = PaymentDatabase
router = Router()
admins_list = [218881994, 854686840]


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM
class PromoState(StatesGroup):
    waiting_for_code = State()


# –ö–æ–º–∞–Ω–¥–∞: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command(commands=["create_promo"]))
async def create_promo(message: Message):
    if message.from_user.id not in admins_list:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    args = message.text.split()
    if len(args) < 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/create_promo <–∞–∫—Ç–∏–≤–∞—Ü–∏–π> <–¥–Ω–µ–π>\n–ü—Ä–∏–º–µ—Ä: /create_promo 5 7")

    activation_count, duration_days = int(args[1]), int(args[2])
    promo_code = secrets.token_hex(11).upper()

    await PaymentDatabase.add_promo(promo=promo_code, days_activate=duration_days, count_activate=activation_count)

    await message.answer(
        f"üéÅ –í–æ—Ç –≤–∞—à –ø—Ä–æ–º–æ: <code>/promo {promo_code}</code>\n"
        f"–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: <b>{activation_count}</b>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: <b>{duration_days} –¥–Ω–µ–π</b>",
        parse_mode="HTML"
    )


# –ö–æ–º–∞–Ω–¥–∞: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ /promo
@router.message(Command(commands=["promo"]))
async def promo_command_handler(message: Message, state: FSMContext):
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥. –ü—Ä–∏–º–µ—Ä: /promo AB12CD34")

    await handle_promo_code(message, args[1].strip(), state)


# –ö–Ω–æ–ø–∫–∞: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@router.message(F.text == "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def activate_promo_button(message: Message, state: FSMContext):
    await message.answer("""–°–æ–≤–µ—Ä—à–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—é, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="http://xn--80aaakg2dnbd.xn--p1ai/oferta">–æ—Ñ–µ—Ä—Ç–æ–π</a>.\n\nüîê –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:""",
                         parse_mode="HTML")
    await state.set_state(PromoState.waiting_for_code)


# Inline-–∫–Ω–æ–ø–∫–∞: "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
@router.callback_query(F.data == "activate_promo")
async def activate_promo_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("""–°–æ–≤–µ—Ä—à–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—é, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="http://xn--80aaakg2dnbd.xn--p1ai/oferta">–æ—Ñ–µ—Ä—Ç–æ–π</a>.\n\nüîê –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:""",
                                     parse_mode="HTML")
    await state.set_state(PromoState.waiting_for_code)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@router.message(PromoState.waiting_for_code)
async def promo_input_handler(message: Message, state: FSMContext):
    await handle_promo_code(message, message.text.strip(), state)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
async def handle_promo_code(message: Message, promo_code: str, state: FSMContext):
    db = PaymentDatabase
    promo_code = promo_code.upper()

    result = await db.execute_query('SELECT * FROM promocodes WHERE promocode = %s', (promo_code,))
    if not result:
        await state.clear()
        return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    promo = result[0]
    if promo["number_of_activations"] <= 0:
        await state.clear()
        return await message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")

    await db.activate_promo_subscription(
        tg_id=message.from_user.id,
        promo_code=promo_code,
        duration_days=promo["days_activate"]
    )

    await db.execute_query('UPDATE promocodes SET count_activated = count_activated - 1 WHERE promocode = %s', (promo_code,))
    keyboard = await get_main_menu()
    await message.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {promo['days_activate']} –¥–Ω–µ–π!",
        reply_markup=keyboard
    )
    await state.clear()