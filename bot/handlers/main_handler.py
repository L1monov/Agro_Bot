from aiogram import Bot, Router, F
from aiogram.types import Message
from aiogram.types import CallbackQuery
from keyboards.builder import get_choice_products, get_choice_regions, subscription_management_keyboard
from texts import get_msg_choice_product, get_tex_podderjka, get_actual_price_msg
from data.database import Declaration, User, Sellers
from utils.filter import filter_sellers
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

router = Router()
User = User()
Sellers = Sellers()

from aiogram.fsm.state import State, StatesGroup
from keyboards.builder import get_seller_culture, get_basis_keyboard
from texts import get_end_subscription
class PriceStates(StatesGroup):
    choosing_culture = State()
    choosing_basis = State()



@router.message(F.text == "–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
async def start(message: Message, bot: Bot):
    info_user_subscription = await User.get_info_subscription_user(tg_id=message.from_user.id)
    if not info_user_subscription:
        text = await get_end_subscription()
        return await message.answer(
            text=text
            , parse_mode="HTML"
        )
    keyboard = await get_choice_products(tg_id=message.from_user.id)
    msg = await get_msg_choice_product()
    return await message.answer(text=msg, reply_markup=keyboard)

@router.message(F.text == "–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞")
async def choice_region(message: Message, bot: Bot):
    keyboard = await get_choice_regions(tg_id=message.from_user.id, page=1)
    info_user_subscription = await User.get_info_subscription_user(tg_id=message.from_user.id)
    if not info_user_subscription:
        text = await get_end_subscription()
        return await message.answer(
            text=text, parse_mode="HTML"
        )
    msg = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:"
    return await message.answer(text=msg, reply_markup=keyboard)





@router.message(F.text == "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã")
async def cmd_actual_prices(message: Message, state: FSMContext):
    await state.clear()
    keyboard = await get_seller_culture()
    msg = await get_actual_price_msg()
    await message.answer(
        text=msg,
        reply_markup=keyboard
    )
    await state.set_state(PriceStates.choosing_culture)


@router.callback_query(PriceStates.choosing_culture, F.data.startswith("get_seller_"))
async def process_culture_choice(callback: CallbackQuery, state: FSMContext):
    culture = callback.data.removeprefix("get_seller_")
    await state.update_data(chosen_culture=culture)

    basis_kb = await get_basis_keyboard()
    await callback.message.edit_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{culture}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–∏—Å –ø—Ä–∏—ë–º–∞:",
        reply_markup=basis_kb,
        parse_mode="HTML"
    )
    await state.set_state(PriceStates.choosing_basis)
    await callback.answer()


@router.callback_query(PriceStates.choosing_basis, F.data.startswith("get_basis_"))
async def process_basis_choice(callback: CallbackQuery, state: FSMContext):
    raw_basis = callback.data.removeprefix("get_basis_")
    await state.update_data(chosen_basis=raw_basis)

    data = await state.get_data()
    culture = data["chosen_culture"]

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ ¬´–í—Å–µ –±–∞–∑—ã¬ª
    if raw_basis == "all":
        basis = ""
        display_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{culture}</b> ‚Äî <i>–≤—Å–µ –±–∞–∑—ã –ø—Ä–∏—ë–º–∞</i>"
    else:
        basis = raw_basis
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        display_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{culture}</b> ‚Äî <i>{basis}</i>"
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ä—Ç, —É–±–∏—Ä–∞–µ–º ¬´–ü–æ—Ä—Ç ¬ª –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        if "–ü–æ—Ä—Ç" in basis:
            basis = basis.replace("–ü–æ—Ä—Ç ", "")

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä, –∏ —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        text=display_text + "\n\n–°–æ–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã...",
        parse_mode="HTML"
    )
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –µ—Å–ª–∏ basis == "", —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É –Ω–µ –±—É–¥–µ—Ç
    sellers = await Sellers.get_sellers(basis=basis, culture=culture)
    grouped = await filter_sellers(announcements=sellers)
    if not grouped:
        return await callback.message.answer(text="–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

    for company, addresses in grouped.items():
        for address, offers in addresses.items():
            lines = []
            for o in offers:
                specs = o.get("specs", "").strip()
                if not specs:
                    continue
                price = o.get("price", "").strip() or "‚Äî"
                lines.append(f"{specs} ‚Äì {price}")

            if not lines:
                continue

            text = (
                f"<b>{company.upper()}</b>\n"
                f"{address}:\n\n"
                + "\n\n".join(lines)
            )
            try:
                await callback.message.answer(text=text, parse_mode="HTML")
            except Exception:
                print(f"[TOO LONG MESSAGE]\n{text}")
                continue

    await state.clear()
    await callback.message.answer(text="–ì–æ—Ç–æ–≤–æ ‚Äì –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã.")



@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def help(message: Message, bot: Bot):
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/agroradar_support")]
        ]
    )
    msg = await get_tex_podderjka()

    try:
        await message.edit_text(text=msg, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message.answer(text=msg, reply_markup=keyboard, parse_mode="HTML")

@router.message(F.text == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º")
async def send_welcome(message: Message, bot: Bot):
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.types.copy_text_button import CopyTextButton

    bot_username = (await bot.get_me()).username

    tg_id = message.from_user.id
    referral_code = await User.get_user_referal(tg_id=tg_id)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥

    bot_link = f"https://t.me/{bot_username}?start={referral_code}"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    copy_button = InlineKeyboardButton(
        text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
        copy_text=CopyTextButton(text=bot_link)
    )
    copy_keyboard = InlineKeyboardMarkup(inline_keyboard=[[copy_button]])

    msg = f"""<b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!</b>
–ó–∞ –∫–∞–∂–¥–æ–≥–æ –æ—Ñ–æ—Ä–º–∏–≤—à–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ ‚Äî 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.

–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:
    """
    try:
        await message.edit_text(text=msg,parse_mode="HTML")
        await message.answer(text=bot_link, parse_mode="HTML")
    except Exception:
        await message.answer(text=msg, parse_mode="HTML")
        await message.answer(text=bot_link,  parse_mode="HTML")


PAGE_SIZE = 10
MAX_DECLS = 50

async def _send_declarations_page(chat, state: FSMContext):
    data = await state.get_data()
    decls = data.get("decls", [])
    offset = data.get("offset", 0)

    page = decls[offset : offset + PAGE_SIZE]
    page.reverse()
    for declaration in page:
        from datetime import datetime, date

        from_value = lambda key: declaration.get(key) if declaration.get(key) not in [None, "NULL", "null", ""] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        addresses = [
            from_value("applicant_activity_address"),
            from_value("applicant_location_address"),
            from_value("manufacturer_production_address"),
            from_value("manufacturer_location_address")
        ]
        full_address = next((a for a in addresses if a != "–ù–µ —É–∫–∞–∑–∞–Ω–æ"), "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        raw_date = declaration.get("declaration_date")
        if raw_date and raw_date not in ["NULL", "null", ""]:
            try:
                if isinstance(raw_date, (datetime, date)):
                    mirrored_date = raw_date.strftime("%d.%m.%Y")
                else:
                    mirrored_date = datetime.strptime(raw_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            except:
                mirrored_date = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            mirrored_date = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        person_name = from_value("applicant_person_name") or from_value("manufacturer_person_name")
        short_name = declaration.get("applicant_short_name") or from_value("applicant_full_name") or from_value("manufacturer_person_name")

        text = f"""
<b>ID –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏:</b> {from_value("declaration_id")}
<b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b> {from_value("product_name")}
<b>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:</b> {from_value("product_designation")}
<b>–†–∞–∑–º–µ—Ä –ø–∞—Ä—Ç–∏–∏:</b> {from_value("batch_size")}
<b>–î–∞—Ç–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏:</b> {mirrored_date}
<b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {short_name}
<b>–ò–ù–ù:</b> {from_value("applicant_inn")}
<b>–ê–¥—Ä–µ—Å:</b> {full_address}
<b>–ò–º—è –∑–∞—è–≤–∏—Ç–µ–ª—è:</b> {person_name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {from_value("applicant_phone") or from_value("manufacturer_phone")}
<b>–ü–æ—á—Ç–∞:</b> {from_value("applicant_email") or from_value("manufacturer_email")}
""".strip()

        # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        if len(text) <= 4000:
            await chat.answer(text=text, protect_content=True, parse_mode="HTML")

    # –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
    new_offset = offset + PAGE_SIZE
    total = len(decls)
    if new_offset < total:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë",
                    callback_data="show_more_decls"
                )]
            ]
        )
    else:
        kb = None

    await chat.answer(
        text=f"{min(new_offset, total)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π –ø–æ–∫–∞–∑–∞–Ω–æ",
        reply_markup=kb
    )

@router.message(F.text == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ")
async def get_last_declarations(message: Message, state: FSMContext):
    from utils.filter import contains_stop_words, should_skip_company

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    info_user_subscription = await User.get_info_subscription_user(tg_id=message.from_user.id)
    if not info_user_subscription:
        text = await get_end_subscription()
        return await message.answer(
            text=text, parse_mode="HTML"
        )

    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
    declarationDB = Declaration()
    all_decls = await declarationDB.get_last_declaration(tg_id=message.from_user.id)

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏–π, —Å–æ–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º—É–º MAX_DECLS
    selected = []
    for decl in all_decls:
        if len(selected) >= MAX_DECLS:
            break

        pn = (decl.get("product_name") or "").lower()
        des = (decl.get("product_designation") or "").lower()
        # –æ—Å–æ–±–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–∞—Ñ–ª–æ—Ä
        if "–º–∞—Å–ª–æ" in pn and "—Å–∞—Ñ–ª–æ—Ä" in pn or "–º–∞—Å–ª–æ" in des and "—Å–∞—Ñ–ª–æ—Ä" in des:
            continue

        company = (
            decl.get("applicant_short_name")
            or decl.get("manufacturer_short_name")
            or decl.get("applicant_full_name")
            or decl.get("manufacturer_full_name") or ""
        ).strip()
        if should_skip_company(company, pn, des):
            continue

        allow_k = "–∫—Ä–∞—Ö–º–∞–ª" in pn or "–∫—Ä–∞—Ö–º–∞–ª" in des
        allow_m = "–º–∞—Å–ª–æ" in pn
        if contains_stop_words(pn, allow_k, allow_m) or contains_stop_words(des, allow_k, allow_m):
            continue

        selected.append(decl)

    if not selected:
        return await message.answer("–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π.")


    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º offset
    await state.update_data(decls=selected, offset=0)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await _send_declarations_page(message, state)

@router.callback_query(F.data == "show_more_decls")
async def show_more_declarations(callback: CallbackQuery, state: FSMContext):
    info_subscription = await User.get_info_subscription_user(tg_id=callback.from_user.id)
    is_trial = False
    if info_subscription and info_subscription.get("id_subscription") == 998:
        if info_subscription.get("status") == "active":
            is_trial = True
    if is_trial:
        msg = (
            "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π.\n\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π "
            "–ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —Ä–µ–≥–∏–æ–Ω–∞–º."
        )
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π (–∫–∞–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π¬ª)
        kb = await subscription_management_keyboard(tg_id=callback.from_user.id)
        await callback.message.answer(text=msg, reply_markup=kb, parse_mode="HTML")
        await callback.answer()
        return

    # 3) –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ ¬´–ø–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª
    data = await state.get_data()
    offset = data.get("offset", 0) + PAGE_SIZE
    await state.update_data(offset=offset)
    await _send_declarations_page(callback.message, state)
    await callback.answer()


